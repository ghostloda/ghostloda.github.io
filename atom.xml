<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ghostloda.github.io</id>
    <title>Loda</title>
    <updated>2020-04-05T05:44:49.630Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ghostloda.github.io"/>
    <link rel="self" href="https://ghostloda.github.io/atom.xml"/>
    <subtitle>学而不思则罔</subtitle>
    <logo>https://ghostloda.github.io/images/avatar.png</logo>
    <icon>https://ghostloda.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Loda</rights>
    <entry>
        <title type="html"><![CDATA[读《程序员思维修炼》]]></title>
        <id>https://ghostloda.github.io/post/du-lesslesscheng-xu-yuan-si-wei-xiu-lian-greatergreater/</id>
        <link href="https://ghostloda.github.io/post/du-lesslesscheng-xu-yuan-si-wei-xiu-lian-greatergreater/">
        </link>
        <updated>2020-04-05T05:36:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="读程序员思维修炼">读《程序员思维修炼》</h1>
<p>本书结构：</p>
<h2 id="从新手到专家的历程">从新手到专家的历程</h2>
<p>新手 --高级新手 --胜任者 --精通者 --专家<br>
<img src="https://ghostloda.github.io/post-images/1586065472122.png" alt="" loading="lazy"></p>
<h2 id="认识你的大脑">认识你的大脑</h2>
<p>双cpu模式</p>
<figure data-type="image" tabindex="1"><img src="https://ghostloda.github.io/post-images/1586065477281.png" alt="" loading="lazy"></figure>
<p>两个cpu分别提供了L型和R型处理模式</p>
<ul>
<li>
<p>L型：逻辑推理分析语言等线性思维能力</p>
</li>
<li>
<p>R型:非语言 非理性 空间性 直觉 全面 （专家级别这个方面比较强）</p>
</li>
</ul>
<h2 id="正确使用大脑">正确使用大脑</h2>
<p>收获R型线索：许多想法是无法用语言表达的，比如梦境。</p>
<ul>
<li>
<p>利用图像</p>
</li>
<li>
<p>利用日记</p>
</li>
<li>
<p>晨写技术</p>
</li>
<li>
<p>自由写（写博客）：任何写东西的机会都是好的练习方式。对这个话题你到底持有什么样的看法？你到底了解多少---不仅仅是你如何想的，也包括你的理由，面向公共写作是一种阐明想法和信念的好办法。</p>
</li>
<li>
<p>​	如何开始？除非你正积极澎湃的关注某个话题，否则很难坐下来写一些东西。采用杰拉德·温伯格的Fieldstone(修建大鹅卵石墙)，养成一直收集思维大卵石的习惯，一旦有了积累，造墙的过程就会很容易。</p>
</li>
<li>
<p>利用散步</p>
</li>
</ul>
<h2 id="调试你的大脑">调试你的大脑</h2>
<ul>
<li>认知的偏见：思维如何被误导</li>
<li>时代的影响：同时代人如何影响你</li>
<li>个性倾向：个性如何影响思维</li>
<li>硬件故障：大脑较老区域如何压制较聪明的区域。</li>
</ul>
<h2 id="积极学习">积极学习</h2>
<p>在当今的技术和文化环境下，学习能力可能是成功的最重要因素。</p>
<p><strong>技术本身并不重要，持续学习才是最重要的</strong>。</p>
<p>常见的学习方法是把教育当作学习者被动接受的事情--灌输，而不是引导。这种模型在公司培训中尤其流行，称之为羊浸式培训。学习不是强加于你的，而是你主动要做的事情。仅仅掌握知识，而不去实践，没有用。随机的方法，没有目标和反馈，往往会导致随机的结果。</p>
<ul>
<li>瞄准目标</li>
<li>具体的，</li>
<li>可度量的</li>
<li>可实现的</li>
<li>相关的</li>
<li>时间可控的</li>
</ul>
<p>例如：当我学习弹钢琴的时候，我的老师给我设定了一年的目标。并且每周都给我安排特定的培训以保证我能达成目标。设定目标是第一步，下一步行动是创建小任务以帮助你每天或者每隔一段时间都能达成某种程度，你创建的小任务越多，你就越容易看清自己与目标的距离。</p>
<p><strong>管理知识的投资：像管理金融投资一样小心管理你的知识投资</strong></p>
<ul>
<li>制定具体计划</li>
<li>多样化</li>
<li>主动投资</li>
<li>定期投资</li>
<li>要以发展的眼光重新修改目标或者实施步骤</li>
</ul>
<p><strong>增强学习的方法</strong>：</p>
<ul>
<li>小组学习</li>
<li>主动阅读和总结书面材料的更好方式</li>
<li>使用思维导图</li>
<li>以教代学</li>
<li>观察学习，模仿别人是最有效的学习方式，阅读是一种最低效的学习方式</li>
</ul>
<p><strong>如何是阅读更有效：</strong></p>
<ul>
<li>调查：扫描目录和每章总结，得出总体看法</li>
<li>问题：记录所有问题（带着问题去阅读，不要毫无目的）</li>
<li>阅读：阅读全部内容</li>
<li>复述：总结，做笔记，用自己的话来描述</li>
<li>回顾：重读，扩展笔记，与同事讨论</li>
</ul>
<p>这项技术第一个有用的方面是主动性，人们不再随机的捡起一本书阅读，而不管记住和记不住多少内容，这项技术是一种更周到，更自觉，更有意识的方法。</p>
<h2 id="积累经验">积累经验</h2>
<p>这章有点鸡汤了，不过其中有个波西亚的解题方法似乎有点意思，</p>
<ol>
<li>解决问题时，先提问自己。未知量是什么。已知量是什么。条件是什么。</li>
<li>努力回想相关问题</li>
<li>画一张图</li>
<li>拆分小问题，</li>
<li>所有已知量都用上了吗？如果没有，为什么？</li>
<li>尝试重新复述这个问题</li>
<li>尝试从未知量推到已知量</li>
</ol>
<p>最后，像专家一样思考。</p>
<h2 id="控制注意力">控制注意力</h2>
<p>通过冥想进行锻炼</p>
<h2 id="超越专家">超越专家</h2>
<p>避免多任务切换</p>
<p>所有相关问题，应该在显示器上，容易获取，摆在台面上。</p>
<p>多显示器，会提高20%-30%生产率</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于docker挂载文件的生效问题的疑惑]]></title>
        <id>https://ghostloda.github.io/post/guan-yu-docker-gua-zai-wen-jian-de-sheng-xiao-wen-ti-de-yi-huo/</id>
        <link href="https://ghostloda.github.io/post/guan-yu-docker-gua-zai-wen-jian-de-sheng-xiao-wen-ti-de-yi-huo/">
        </link>
        <updated>2020-03-06T01:10:32.000Z</updated>
        <content type="html"><![CDATA[<p>docker直接修改挂载文件，理论上是可以直接反应在容器内部的，他们共享一个文件，为何在宿主机内修改无效呢，而你以为只有重启才会使修改生效？其实不是的。</p>
<p>如果直接用vi编辑宿主机文件,这是因为用vi编辑保存时会修改文件的inode，<code>Linux</code>系统内部不使用文件名，而是使用<code>inode号码</code>识别文件。对于系统来说文件名只是<code>inode号码</code>便于识别的别称</p>
<p>修改前：<br>
l</p>
<pre><code>root@rancher:/home/llx/test# stat  config.js 
  File: config.js
  Size: 215       	Blocks: 8          IO Block: 4096   regular file
Device: 802h/2050d	Inode: 1577292     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/     lcx)   Gid: ( 1000/     lcx)
Access: 2020-03-06 01:01:28.635119676 +0000
Modify: 2020-03-06 01:01:21.855586110 +0000
Change: 2020-03-06 01:01:21.855586110 +0000
 Birth: -

</code></pre>
<p>使用vi修改</p>
<pre><code> vi nginx.conf
</code></pre>
<p>修改后，可以发现Inode变了。</p>
<pre><code>root@rancher:/home/llx/test# stat  config.js 
  File: config.js
  Size: 215       	Blocks: 8          IO Block: 4096   regular file
Device: 802h/2050d	Inode: 1579271     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/     lcx)   Gid: ( 1000/     lcx)
Access: 2020-03-06 01:23:28.188175929 +0000
Modify: 2020-03-06 01:23:28.188175929 +0000
Change: 2020-03-06 01:23:28.196175914 +0000
 Birth: -
root@rancher:/home/lcx/aimp.fornt# 

</code></pre>
<p>正确操作，使用cat不会更改inode</p>
<pre><code># cp config.js config2.js 
# vi config2.js
# cat config2.js &gt; config.js
</code></pre>
<p><a href="https://www.cnblogs.com/llife/p/11470668.html">更多关于Inode阅读</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读《代码之外的功夫：程序员精进之路》]]></title>
        <id>https://ghostloda.github.io/post/du-lesslessdai-ma-zhi-wai-de-gong-fu-cheng-xu-yuan-jing-jin-zhi-lu-greatergreater/</id>
        <link href="https://ghostloda.github.io/post/du-lesslessdai-ma-zhi-wai-de-gong-fu-cheng-xu-yuan-jing-jin-zhi-lu-greatergreater/">
        </link>
        <updated>2020-03-05T08:52:41.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>利用线框图表达功能需求</li>
</ul>
<p>如何开始项目的第一轮开发。通常在这一阶段，绘制线框图非常有帮助。你可以通过线框图向大家解释待开发应用的基本结构，同时让大家都了解需要完成什么工作，以免因过度关注技术细节而迷失了大方向。</p>
<ul>
<li>
<p>忠告与提醒<br>
.描述问题的原始资料一般都是零散的语句、示例和参考材料。为了理解这些资料，你需要记笔记，排除噪声信息，只留下最关键的细节。<br>
· 每个问题的背后都有一堆简单的子问题，你早已知道如何解决它们。要将问题不断拆分，直到你能辩认出构成它的子问题为止。<br>
· 难题由很多活动部分组成。先观察各个部分如何联系在一起，而不要管具体的实现细节。在写代码之前，先用纸笔解决部分问题。<br>
· 在无效数据集上运用有效规则可能会得到难以调试的混乱结果。不要假设输入数据集的格式正确。在处理任何数据集之前，都要预先检查，以避免出现“垃圾进、垃圾出”的情况。</p>
</li>
<li>
<p>自底向上的设计<br>
从实现最小化功能入手,自底向上进行系统设计的一个难点是将对象之间的纽带解开，以便一小部分一小部分地进行实现，而不是一次实现一整块。这个技能非常重要，因为它有助于实现增量式设计。<br>
推迟决策：推迟决策确实是自底向上设计的重要部分。过早提取对象，然后尝试去想象未来的使用情况，可能导致接口变得乱七八糟；一旦考虑实际需求，就能更轻松的进行接口设计。</p>
</li>
<li>
<p>自底向上与自顶向下的取舍<br>
自顶向下的设计方法中，你一开始就会考虑可支持的机器类型，然后再去创建满足这些类型的抽象层。这样做可以让系统变得更容易集成，但对于简单情况而言，可能会让代码过于复杂，因为需要提前做更多的规划。<br>
在实际应用中，自底向上和自顶向下是相辅相成的。自底向上的设计方法有利于发掘新的设计理念，同时让设计保持简洁。当你遭遇死胡同或碰到难点时，自顶向下的设计方法可以帮助你从整体上思考问题，将事物之间的联系统一起来。两种设计方法并非水火不容，它们只是用途不同。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牢骚]]></title>
        <id>https://ghostloda.github.io/post/lao-sao/</id>
        <link href="https://ghostloda.github.io/post/lao-sao/">
        </link>
        <updated>2020-03-05T05:38:47.000Z</updated>
        <content type="html"><![CDATA[<p>Tab和空格真的是个让人头疼的问题啊！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iris框架集成swagger]]></title>
        <id>https://ghostloda.github.io/post/iris-kuang-jia-ji-cheng-swagger/</id>
        <link href="https://ghostloda.github.io/post/iris-kuang-jia-ji-cheng-swagger/">
        </link>
        <updated>2020-03-05T02:18:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="iris集成swagger">iris集成swagger</h1>
<h3 id="手动编写or自动生成">手动编写or自动生成？</h3>
<ul>
<li>
<p>swagger editor</p>
</li>
<li>
<p>go-swagger工具根据注释生成yaml文档--&gt;swagger UI展示</p>
<h3 id="swaggo工具">swaggo工具</h3>
<ol>
<li>支持Iris框架（go-swagge使用者较多，但是目前稳定版本不支持mod）</li>
<li>不需要手动调用一遍api才能生成文档</li>
<li>解析注释。</li>
<li>引入swagger包去解析生成yml文档，进行前端显示 Swagger 格式的api信息和测试api。</li>
</ol>
</li>
</ul>
<h4 id="安装使用">安装使用：</h4>
<pre><code>$ go get -u github.com/swaggo/swag/cmd/swag
</code></pre>
<p>环境变量配置</p>
<pre><code>Path:&amp;GOPATH\bin
</code></pre>
<p>进入项目根目录，进行初始化操作，根据注释生成api文档</p>
<pre><code>$ swag init
</code></pre>
<p>引入swagger包:</p>
<pre><code>import &quot;github.com/iris-contrib/swagger&quot; // swagger middleware for Iris 
import &quot;github.com/iris-contrib/swagger/swaggerFiles&quot; // swagger embed files
</code></pre>
<pre><code>_ &quot;cloudview.NPMS.backend/docs&quot; // docs is generated by Swag CLI, you have to import it.
</code></pre>
<h4 id="示例">示例</h4>
<pre><code class="language-golang">package main

import (
    &quot;github.com/kataras/iris&quot;

    &quot;github.com/iris-contrib/swagger&quot;
    &quot;github.com/iris-contrib/swagger/swaggerFiles&quot;

    _ &quot;./docs&quot; // docs is generated by Swag CLI, you have to import it.
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
    app := iris.New()

    config := &amp;swagger.Config{
        URL: &quot;http://localhost:8080/swagger/doc.json&quot;, //The url pointing to API definition
    }
    // use swagger middleware to 
    app.Get(&quot;/swagger/{any:path}&quot;, swagger.CustomWrapHandler(config, swaggerFiles.Handler))

    app.Run(iris.Addr(&quot;:8080&quot;))
}
</code></pre>
<p>Run it, and browser to http://localhost:8080/swagger/index.html,</p>
<h4 id="禁用">禁用:</h4>
<pre><code class="language-golang">package main

import (
    &quot;github.com/kataras/iris&quot;

    &quot;github.com/iris-contrib/swagger&quot;
    &quot;github.com/iris-contrib/swagger/swaggerFiles&quot;

    _ &quot;./docs&quot; // docs is generated by Swag CLI, you have to import it.
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
    app := iris.New()

    // use swagger middleware to 
    app.Get(&quot;/swagger/{any:path}&quot;, swagger.DisablingWrapHandler(swaggerFiles.Handler, &quot;NAME_OF_ENV_VARIABLE&quot;))

    app.Run(iris.Addr(&quot;:8080&quot;))
}
</code></pre>
<h4 id="源码地址">源码地址</h4>
<p><a href="https://github.com/iris-contrib/swagger">iris-contrib</a></p>
<h4 id="注释规范">注释规范</h4>
<p>https://swaggo.github.io/swaggo.io/declarative_comments_format/</p>
<p>https://github.com/swaggo/swag</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[性能排查思路]]></title>
        <id>https://ghostloda.github.io/post/xing-neng-pai-cha-si-lu/</id>
        <link href="https://ghostloda.github.io/post/xing-neng-pai-cha-si-lu/">
        </link>
        <updated>2020-03-05T01:16:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://ghostloda.github.io/post-images/1583371126775.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>